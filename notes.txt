### DSL:

## Plain list of ports

chain_1 = Process('chain_1',
    SomeInputPort,
    SomeProcessor,
    Duplicate('to_some_dest'),
    partition='main',
    description='some docs'
)

# - parameters:
#   Process(name, *ports, **metadata)
# - returns: component


## Using a builder function

@Process
def chain_2(context):
    """
    some docs
    """
    yield SomeInputPort
    yield SomeProcessor
    yield context.Duplicate('to_some_dest')

# - parameters:
#   Process(callable)
# - returns: component

## Using a builder class 

@Process
class chain_3(Builder):
    """
    some docs
    """

    def build(self, context):
        port_in=SomeInputPort
        proc=SomeProcessor
        port_out=context.Duplicate('to_some_dest')

        context.connect(port_in, proc)
        context.connect(proc, port_out)

# - parameters:
#   Process(cls)
# - returns: component

## Using a builder function with params

@Process(outs=['to_some_dest'])
def chain_4(context, outs):
    """
    some docs
    """
    yield SomeInputPort
    yield SomeProcessor
    yield context.Duplicate(outs[0])

# - parameters:
#   Process(outs=[...])
# - returns: decorator callable

## Using a builder class with params

@Process(outs=['to_some_dest'])
class chain_5(Builder):
    """
    some docs
    """

    def __init__(self, outs):
        self.outs = outs

    def build(self, context):
        port_in=SomeInputPort
        proc=SomeProcessor
        port_out=context.Duplicate(self.outs[0])

        context.connect(port_in, proc)
        context.connect(proc, port_out)

# - parameters:
#   Process(cls)
# - returns: decorator callable

## Reusing a builder function

@Process
def chain_6(context):
    """
    some docs
    """
    yield AdditionalUpstearmPort
    yield from chain_2(context)
    yield Duplicate('to_additional_dest')

## Reusing a builder class

@Process
def chain_8(chain_3):
    """
    some docs
    """
    pass

## Reusing a builder class and set params.
@Process
def chain_9(chain_5):
    """
    some docs
    """
    outs = ['to_some_dest']

## Using context:

with dsl.Context as ctx:
    eval/exec source file

compiler.compile(ctx.flowmap)
